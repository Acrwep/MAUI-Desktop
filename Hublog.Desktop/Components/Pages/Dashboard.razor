@page "/dashboard"
@inject HttpClient HttpClient
@using Hublog.Desktop.Entities
@using System.Text
@using Newtonsoft.Json
<link href="/css/dashboard.css" rel="stylesheet" />

<div class="dashboard_mainContainer">
    <div class="dashboard_headerContainer">
        <div class="dashboard_profileContainer">
          <img src="/images/user.png" style="width:100%" />
        </div>
    </div>
    <div class="dashboard_namesContainer">
        <p class="dashboard_fullname">@firstName @lastName</p>
        <p class="dashboard_email">@userEmail</p>
    </div>

    <div class="dashboard_timerContainer">
        <p class="dashboard_timer">@elapsedTime</p>

        <div style="position:relative;">
            @if (buttonText == "Punch In")
            {
                <div class="punchin_NonbuttonContainer" />
                <button class="punchin_button" @onclick="ToggleTimer"> Punch <br /> In</button>
            }
            else
            {
                <div class="punchin_buttonContainer" />
                <button class="punchin_button" @onclick="ToggleTimer"> Punch <br /> Out</button>
            }
        </div>
        @if (buttonText == "Punch Out")
        {
            <button class="break_button" @onclick="TakeBreak">@breakButtonText</button>
        }
    </div>

    <div class="logoutrow_container">
        <div class="row g-2">
            <div class="col-5">
                <div style="display:flex;justify-content:center;">
                    <a href="https://hublog.org/login" class="opendashboard_button">Open Dashboard</a>
                </div>
            </div>
            <div class="col-7">
                <div class="lastsync_container">
                    <img src="/images/refresh-cw.svg" class="lastsync_image" />
                    <p class="lastsync_text">@lastSyncText</p>
                    <Hublog.Desktop.Components.Layout.LogoutButton />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string elapsedTime = "00:00:00";
    private bool isTimerRunning = false;
    private bool isOnBreak = false;
    private TimeSpan timeSpan = TimeSpan.Zero;
    private System.Threading.Timer timer;
    private string buttonText = "Punch In";
    private string breakButtonText = "Break";
    private int currentType = 0;

    private string firstName;
    private string lastName;
    private string userEmail;
    private string initials;

    private DateTime lastSyncTime;
    private string lastSyncText = "Last sync 0 mins ago";
    private System.Threading.Timer syncTimer;

    protected override void OnInitialized()
    {
        var claimsJson = Preferences.Default.Get("Claim", string.Empty);
        if (!string.IsNullOrEmpty(claimsJson))
        {
            try
            {
                var claims = JsonConvert.DeserializeObject<Dictionary<string, string>>(claimsJson);
                if (claims != null)
                {
                    firstName = claims.ContainsKey("First_Name") ? claims["First_Name"] : "N/A";
                    lastName = claims.ContainsKey("Last_Name") ? claims["Last_Name"] : "N/A";
                    userEmail = claims.ContainsKey("Email") ? claims["Email"] : "N/A";
                    initials = GetInitials(firstName, lastName);
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializing claims: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("No claims found in Preferences.");
        }

        // Initialize last sync timer
        lastSyncTime = DateTime.Now;
        StartSyncTimer();
    }


    private string GetInitials(string firstName, string lastName)
    {
        if (string.IsNullOrEmpty(firstName) || string.IsNullOrEmpty(lastName))
            return "N/A";

        return $"{firstName?[0]}{lastName?[0]}".ToUpper();
    }

    private void ToggleTimer()
    {
        if (isTimerRunning)
        {
            StopTimer();
            buttonText = "Punch In";
        }
        else
        {
            StartTimer();
        }
        InvokeAsync(StateHasChanged);
    }

    private void StartTimer()
    {
        isTimerRunning = true;
        timer = new System.Threading.Timer(UpdateTimer, null, 0, 1000);
        buttonText = "Punch Out";
        currentType = 1;
        PunchIn();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timeSpan = TimeSpan.Zero;
        elapsedTime = "00:00:00";

        isOnBreak = false;
        breakButtonText = "Break";

        if (currentType == 1 || currentType == 2)
        {
            PunchOut();
        }
        else
        {
            ChangeStatus();
        }
    }

    private void ChangeStatus()
    {
        if (currentType == 0)
        {
            buttonText = "Punch In";
            breakButtonText = "Break";
        }
        else if (currentType == 1)
        {
            buttonText = "Punch Out";
            breakButtonText = "Break";
        }
        else if (currentType == 2)
        {
            buttonText = "Punch Out";
            breakButtonText = "Resume";
        }
    }

    private void UpdateTimer(object state)
    {
        if (isTimerRunning)
        {
            timeSpan = timeSpan.Add(TimeSpan.FromSeconds(1));
            elapsedTime = timeSpan.ToString(@"hh\:mm\:ss");
            InvokeAsync(StateHasChanged);
        }
    }

    private void TakeBreak()
    {
        if (isOnBreak)
        {
            isOnBreak = false;
            breakButtonText = "Break";
            currentType = 1;
        }
        else
        {
            isOnBreak = true;
            breakButtonText = "Resume";
            currentType = 2;
        }

        ChangeStatus();
        InvokeAsync(StateHasChanged);
    }

    private async void PunchIn()
    {
        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
        {
            new UserAttendanceModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                AttendanceDate = istTime.Date,
                Start_Time = istTime,
                End_Time = null,
                Late_Time = null,
                Total_Time = null,
                Status = currentType
            }
        };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // Handle success if needed
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private async void PunchOut()
    {
        if (currentType == 2)
        {
            isOnBreak = false;
            currentType = 1;
        }

        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
        {
            new UserAttendanceModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                AttendanceDate = istTime.Date,
                Start_Time = null,
                End_Time = istTime,
                Late_Time = null,
                Total_Time = null,
                Status = currentType
            }
        };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            currentType = 0;
            buttonText = "Punch In";
            breakButtonText = "Break";
            isOnBreak = false;
            timer?.Dispose();
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private DateTime GetISTTime()
    {
        var utcNow = DateTime.UtcNow;
        var istOffset = TimeSpan.FromHours(5.5);
        return utcNow.Add(istOffset);

    }

    private void StartSyncTimer()
    {
        syncTimer = new System.Threading.Timer(UpdateSyncTime, null, 0, 5000 * 60);
    }

    private void UpdateSyncTime(object state)
    {
        var timeDifference = DateTime.Now - lastSyncTime;
        lastSyncText = $"Last sync {timeDifference.Minutes} mins ago";
        InvokeAsync(StateHasChanged);
    }
}