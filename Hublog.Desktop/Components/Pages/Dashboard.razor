@page "/dashboard"
@inject HttpClient HttpClient
@using Hublog.Desktop.Entities
@using System.Text
@using Microsoft.Maui.Controls.Shapes
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.IO
@using System.Drawing
@using System.Drawing.Imaging
@using System.Threading.Tasks
@using System.Threading
@using System.Net.Http
@inject IJSRuntime JSRuntime


<link href="/css/dashboard.css" rel="stylesheet" />

<div class="dashboard_mainContainer">
    <div class="dashboard_headerContainer">
        <img src="/images/wave.png" class="dashboard_waveimage" />
        <div class="dashboard_profileContainer">
            <p class="initial_text">@initials</p>
        </div>
    </div>

    <div class="dashboard_namesContainer">
        <p class="dashboard_fullname">@firstName @lastName</p>
        <p class="dashboard_email">@userEmail</p>
    </div>

    <div class="dashboard_timerContainer">
        <p class="dashboard_timer">@elapsedTime</p>

        <div style="position:relative;">
            @if (buttonText == "Punch In")
            {
                <div class="punchin_NonbuttonContainer" />
                <button class="punchin_button" @onclick="ToggleTimer"> Punch <br /> In</button>
            }
            else
            {
                <div class="punchin_buttonContainer" />
                <button class="punchin_button" @onclick="ToggleTimer"> Punch <br /> Out</button>
            }
        </div>
        @if (buttonText == "Punch Out")
        {
            <div class="break_buttonContainer">
                <button class="break_button" @onclick="TakeBreak">Break</button>
            </div>
        }
    </div>

    <!-- Modal Structure Break Selection -->
    <div class="modal fade" id="breakModal" tabindex="-1" aria-labelledby="breakModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="breakModalLabel">Choose a Break Option</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (availableBreaks != null && availableBreaks.Count > 0)
                    {
                        @foreach (var breakOption in availableBreaks)
                        {
                            <div class="break_checkboxContainer">
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="@breakOption.Id" name="breakOption" value="@breakOption.Id" @onchange="OnBreakOptionChanged" />
                                    <label class="form-check-label" for="@breakOption.Id">@breakOption.Name<br /></label>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No available breaks found.</p>
                    }
                    <div class="breakchoose_buttonContainer">
                        <button type="button" class="breakchoose_button" @onclick="CloseModal">Choose</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Structure Break Timer -->
    <div class="modal fade" id="breakTimerModal" tabindex="-1" aria-labelledby="breakTimerModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Break Timer</h5>
                </div>
                <div class="modal-body">
                    <p id="breakTimeDisplay">@remainingTime</p>
                    <div class="breakchoose_buttonContainer">
                        <button type="button" class="breakResume_button" @onclick="ResumeWorking">Resume Working</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <script>

        function openBreakTimerModal() {
            console.log("openBreakModal called");
            const modalElement = new bootstrap.Modal(document.getElementById('breakTimerModal'), {
                backdrop: 'static',
                keyboard: true
            });
            modalElement.show();
        }

        function openBreakModal() {
            console.log("openBreakModal called");
            const modalElement = new bootstrap.Modal(document.getElementById('breakModal'), {
                backdrop: 'static',
                keyboard: true
            });
            modalElement.show();
        }

        function closeBreakModal() {
            var modal = bootstrap.Modal.getInstance(document.getElementById('breakModal'));
            modal.hide();
        }

        function closeBreakTimerModal() {
            var modal = bootstrap.Modal.getInstance(document.getElementById('breakTimerModal'));
            modal.hide();
        }

        function changeResumeButtonColorToRed() {
            var button = document.querySelector('.breakResume_button');
            if (button) {
                button.style.backgroundColor = 'red';
                button.style.color = 'white'; 
            }
        }
    </script>

    <div class="logoutrow_container">
        <div class="row g-2">
            <div class="col-5">
                <div style="display:flex;justify-content:center;">
                    <a href="https://hublog.org/login" class="opendashboard_button">Open Dashboard</a>
                </div>
            </div>
            <div class="col-7">
                <div class="lastsync_container">
                    <img src="/images/refresh-cw.svg" class="lastsync_image" />
                    <p class="lastsync_text">last sync 0 min ago</p>
                    <Hublog.Desktop.Components.Layout.LogoutButton />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string elapsedTime = "00:00:00";
    private bool isTimerRunning = false;
    private bool isOnBreak = false;
    private TimeSpan timeSpan = TimeSpan.Zero;

    private System.Threading.Timer punchInTimer;
    private System.Threading.Timer screenshotTimer;

    private string buttonText = "Punch In";
    private string breakButtonText = "Break";
    private int currentType = 0;

    private string firstName;
    private string lastName;
    private string userEmail;
    private string initials;

    private TimeSpan screenshotInterval = TimeSpan.FromSeconds(20);
    private bool isTimerActive = false;

    private List<BreakMaster> availableBreaks = new List<BreakMaster>();
    private int selectedBreakId;
    private BreakInfo selectedBreakInfo;

    private Timer breakTimer;
    private TimeSpan remainingTime;
    private bool isBreakActive = false;
    private int _currentBreakEntryId;

    @inject IScreenCaptureService ScreenCaptureService
    @inject HttpClient HttpClient

    #region GetAvailableBreak
    private async Task FetchAvailableBreaks()
    {
        try
        {
            string URL = MauiProgram.OnlineURL + "api/Users/GetAvailableBreak";

            var getModel = new GetModels
                {
                    OrganizationId = MauiProgram.Loginlist.OrganizationId,
                    UserId = MauiProgram.Loginlist.Id,
                    CDate = DateTime.UtcNow
                };

            string jsonData = JsonConvert.SerializeObject(getModel);

            var requestContent = new StringContent(jsonData, Encoding.UTF8, "application/json");
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", MauiProgram.token);

            var response = await HttpClient.PostAsync(URL, requestContent);

            if (response.IsSuccessStatusCode)
            {
                var responseString = await response.Content.ReadAsStringAsync();
                availableBreaks = JsonConvert.DeserializeObject<List<BreakMaster>>(responseString);
            }
            else
            {
                Console.WriteLine("Failed to fetch available breaks.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching breaks: {ex.Message}");
        }
    }

    private void OpenBreakModal()
    {
        FetchAvailableBreaks().ContinueWith(_ =>
        {
            JSRuntime.InvokeVoidAsync("openBreakModal");
            InvokeAsync(StateHasChanged);
        });
    }

    private void OpenBreakTimerModal()
    {
        JSRuntime.InvokeVoidAsync("openBreakTimerModal");
        InvokeAsync(StateHasChanged);
    }

    private void OnBreakOptionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int breakId))
        {
            selectedBreakId = breakId;
        }
    }

    private void CloseModal()
    {
        var selectedBreak = availableBreaks.FirstOrDefault(b => b.Id == selectedBreakId);

        if (selectedBreak != null)
        {
            selectedBreakInfo = new BreakInfo
                {
                    Id = selectedBreak.Id,
                    Name = selectedBreak.Name,
                    Max_Break_Time = selectedBreak.Max_Break_Time
                };

            PunchBreakIn(selectedBreak.Id).ContinueWith(_ =>
            {
                InvokeAsync(StateHasChanged);
            });
        }
        else
        {
            Console.WriteLine("No break selected or break not found.");
        }

        JSRuntime.InvokeVoidAsync("closeBreakModal");
    }
    #endregion

    protected override void OnInitialized()
    {
        var claimsJson = Preferences.Default.Get("Claim", string.Empty);
        if (!string.IsNullOrEmpty(claimsJson))
        {
            try
            {
                var claims = JsonConvert.DeserializeObject<Dictionary<string, string>>(claimsJson);
                if (claims != null)
                {
                    firstName = claims.ContainsKey("First_Name") ? claims["First_Name"] : "N/A";
                    lastName = claims.ContainsKey("Last_Name") ? claims["Last_Name"] : "N/A";
                    userEmail = claims.ContainsKey("Email") ? claims["Email"] : "N/A";
                    initials = GetInitials(firstName, lastName);
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializing claims: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("No claims found in Preferences.");
        }
    }

    private string GetInitials(string firstName, string lastName)
    {
        if (string.IsNullOrEmpty(firstName) || string.IsNullOrEmpty(lastName))
            return "N/A";

        return $"{firstName?[0]}{lastName?[0]}".ToUpper();
    }

    private void ToggleTimer()
    {
        if (isTimerRunning)
        {
            StopTimer();
            buttonText = "Punch In";
        }
        else
        {
            StartTimer();
        }
        InvokeAsync(StateHasChanged);
    }

    private void StartTimer()
    {
        isTimerRunning = true;
        punchInTimer = new System.Threading.Timer(UpdateTimer, null, 0, 1000);
        buttonText = "Punch Out";
        currentType = 1;
        PunchIn();
        StartScreenshotTimer();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        punchInTimer?.Dispose();
        timeSpan = TimeSpan.Zero;
        elapsedTime = "00:00:00";

        isOnBreak = false;
        breakButtonText = "Break";

        if (currentType == 1 || currentType == 2)
        {
            PunchOut();
            StopScreenshotTimer();
        }
        else
        {
            ChangeStatus();
        }
    }

    #region Screenshot

    private void StartScreenshotTimer()
    {
        if (isTimerActive)
        {
            return;
        }

        screenshotTimer = new System.Threading.Timer(async _ =>
        {
            await CaptureAndUploadScreenshot();
        }, null, TimeSpan.Zero, screenshotInterval);

        isTimerActive = true;
    }

    private void StopScreenshotTimer()
    {
        screenshotTimer?.Dispose();
        isTimerActive = false;
    }

    private async Task CaptureAndUploadScreenshot()
    {
        try
        {
            var screenshotData = ScreenCaptureService.CaptureScreen();

            await UploadScreenshot(screenshotData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Screenshot Error: {ex.Message}");
        }
    }

    private async Task UploadScreenshot(byte[] imageData)
    {
        string filename = DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
        string URL = MauiProgram.OnlineURL + "api/Users/UploadFile";

        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri(URL);
            client.Timeout = TimeSpan.FromMinutes(30);
            client.DefaultRequestHeaders.Add("UId", MauiProgram.Loginlist.Id.ToString());
            client.DefaultRequestHeaders.Add("OId", MauiProgram.Loginlist.OrganizationId.ToString());
            client.DefaultRequestHeaders.Add("SDate", DateTime.Now.ToString());
            client.DefaultRequestHeaders.Add("SType", "ScreenShots");
            client.DefaultRequestHeaders.Add("Authorization", MauiProgram.token);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var content = new MultipartFormDataContent();
            var imageContent = new ByteArrayContent(imageData);
            imageContent.Headers.ContentType = new MediaTypeHeaderValue("image/jpeg");
            content.Add(imageContent, "file", filename);

            HttpResponseMessage response = await client.PostAsync(URL, content);
            string responseString = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Screenshot uploaded successfully at {DateTime.Now}");
            }
            else
            {
                Console.WriteLine($"Upload Error: {response.StatusCode}, Details: {responseString}");
            }
        }
    }

    #endregion

    private void ChangeStatus()
    {
        if (currentType == 0)
        {
            buttonText = "Punch In";
            breakButtonText = "Break";
        }
        else if (currentType == 1)
        {
            buttonText = "Punch Out";
            breakButtonText = "Break";
        }
        else if (currentType == 2)
        {
            buttonText = "Punch Out";
            //breakButtonText = "Resume";
        }
    }

    private void UpdateTimer(object state)
    {
        if (isTimerRunning)
        {
            timeSpan = timeSpan.Add(TimeSpan.FromSeconds(1));
            elapsedTime = timeSpan.ToString(@"hh\:mm\:ss");
            InvokeAsync(StateHasChanged);
        }
    }

    private void TakeBreak()
    {
        if (isOnBreak)
        {
            isOnBreak = false;
            breakButtonText = "Break";
            currentType = 1;
        }
        else
        {
            isOnBreak = true;
            //breakButtonText = "Resume";
            currentType = 2;
            OpenBreakModal();
        }

        ChangeStatus();
        InvokeAsync(StateHasChanged);
    }

    private async void PunchIn()
    {
        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
        {
            new UserAttendanceModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                AttendanceDate = istTime.Date,
                Start_Time = istTime,
                End_Time = null,
                Late_Time = null,
                Total_Time = null,
                Status = currentType
            }
        };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // Handle success if needed
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private async void PunchOut()
    {
        if (currentType == 2)
        {
            isOnBreak = false;
            currentType = 1;
        }

        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
        {
            new UserAttendanceModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                AttendanceDate = istTime.Date,
                Start_Time = null,
                End_Time = istTime,
                Late_Time = null,
                Total_Time = null,
                Status = currentType
            }
        };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            currentType = 0;
            buttonText = "Punch In";
            breakButtonText = "Break";
            isOnBreak = false;
            punchInTimer?.Dispose();
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private void StartBreakTimer(int breakDurationMinutes)
    {
        remainingTime = TimeSpan.FromMinutes(breakDurationMinutes);
        isBreakActive = true;
        breakTimer = new Timer(TimerCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    // private void TimerCallback(object state)
    // {
    //     if (remainingTime.TotalSeconds > 0)
    //     {
    //         remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
    //         InvokeAsync(StateHasChanged);
    //     }
    //     else
    //     {
    //         isBreakActive = false;
    //         breakTimer?.Dispose();
    //         InvokeAsync(StateHasChanged);
    //     }
    // }

    private void TimerCallback(object state)
    {
        if (remainingTime.TotalSeconds > 0)
        {
            remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
            InvokeAsync(StateHasChanged);
        }
        else
        {
            isBreakActive = false;
            breakTimer?.Dispose();
            InvokeAsync(() =>
            {
                StateHasChanged();
                JSRuntime.InvokeVoidAsync("changeResumeButtonColorToRed");
            });
        }
    }


    private async Task PunchBreakIn(int breakEntryId)
    {
        DateTime istTime = GetISTTime();
        int currentType = 1;
        var userBreakList = new List<UserBreakModel>
        {
            new UserBreakModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                BreakDate = istTime.Date,
                Start_Time = istTime,
                BreakEntryId = breakEntryId,
                End_Time = null,
                Status = currentType
            }
        };

        var jsonString = JsonConvert.SerializeObject(userBreakList);
        var apiUrl = MauiProgram.OnlineURL + "api/Users/InsertBreak";

        var httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", MauiProgram.token);

        try
        {
            var response = await HttpClient.PostAsync(apiUrl, httpContent);

            if (response.IsSuccessStatusCode)
            {
                var breakDetails = await GetBreakDetails(breakEntryId);
                if (breakDetails != null)
                {
                    _currentBreakEntryId = breakDetails.Id;
                    selectedBreakInfo = breakDetails;
                    StartBreakTimer(selectedBreakInfo.Max_Break_Time);
                    OpenBreakTimerModal();
                }
                else
                {
                    Console.WriteLine("Failed to retrieve break details.");
                }
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode} - {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private async Task PunchBreakOut()
    {
        if (_currentBreakEntryId == 0)
        {
            Console.WriteLine("No active break found.");
            return;
        }

        DateTime istTime = GetISTTime();
        var breakEndDetails = new List<UserBreakModel>
        {
            new UserBreakModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                BreakDate = istTime.Date,
                Start_Time = istTime,
                End_Time = istTime,
                BreakEntryId = _currentBreakEntryId,
                Status = 2
            }
        };

        var jsonString = JsonConvert.SerializeObject(breakEndDetails);
        var apiUrl = MauiProgram.OnlineURL + "api/Users/InsertBreak";

        var httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", MauiProgram.token);

        try
        {
            var response = await HttpClient.PostAsync(apiUrl, httpContent);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Break ended successfully.");
                isBreakActive = false;
                await JSRuntime.InvokeVoidAsync("closeBreakTimerModal");
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode} - {responseContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }


    private async Task ResumeWorking()
    {
        await PunchBreakOut();
    }

    private async Task<BreakInfo> GetBreakDetails(int breakEntryId)
    {
        var apiUrl = $"{MauiProgram.OnlineURL}api/Users/GetBreakMasterById?id={breakEntryId}";

        try
        {
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", MauiProgram.token);
            var response = await HttpClient.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var responseString = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<BreakInfo>(responseString);
            }
            else
            {
                Console.WriteLine($"Failed to retrieve break details: {response.StatusCode}");
                return null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving break details: {ex.Message}");
            return null;
        }
    }

    private DateTime GetISTTime()
    {
        var utcNow = DateTime.UtcNow;
        var istOffset = TimeSpan.FromHours(5.5);
        return utcNow.Add(istOffset);

    }
}