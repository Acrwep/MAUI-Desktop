@page "/Dashboard"
@inject HttpClient HttpClient
@using Hublog.Desktop.Entities
@using System.Text
@using Newtonsoft.Json
<link href="/css/dashboard.css" rel="stylesheet" />

<div class="dashboard_mainContainer">
    <div class="row g-1">
        <div class="col-4">
           <div class="dashboard_nameContainer">
               <p class="dashboard_initialtext">BR</p>
           </div>
        </div>
        <div class="col-8">
            <div class="dashboard_nameandemailContainer">
                <p style="margin:0; margin-bottom:4px; font-weight:600;">Balaji R</p>
                <p style="font-weight:600;">balaji@gmail.com</p>
            </div>
        </div>
    </div>

    <div class="dashboard_timerContainer">
        <p class="dashboard_timer">07:14:07</p>

        <div style="position:relative;">
            <div class="punchin_buttonContainer" />
            <button class="punchin_button">Punch <br /> In</button>
        </div>
    </div>

    <div class="logoutrow_container">
          <div class="row g-1">
            <div class="col-6">
            <button class="opendashboard_button">Open Dashboard</button>
        </div>
            <div class="col-6">
                <div class="logout_container">
            <img src="/images/logout.png" class="logout_image" />
            <p class="logout_text">Logout</p>
                </div>
        </div>
    </div>
    </div>
  
</div>

@* <h1>Timer</h1>

<p role="timer">@elapsedTime</p>

<button class="btn btn-primary" @onclick="ToggleTimer">@buttonText</button>

@if (isTimerRunning)
{
    <button class="btn btn-secondary" @onclick="TakeBreak">@breakButtonText</button>
}
 *@
@code {
    private string elapsedTime = "00:00:00";
    private bool isTimerRunning = false;
    private bool isOnBreak = false;
    private TimeSpan timeSpan = TimeSpan.Zero;
    private System.Threading.Timer timer;
    private string buttonText = "Punch In";
    private string breakButtonText = "Break";
    private int currentType = 0;

    private void ToggleTimer()
    {
        if (isTimerRunning)
        {
            StopTimer();
        }
        else
        {
            StartTimer();
        }
        InvokeAsync(StateHasChanged);
    }

    private void StartTimer()
    {
        isTimerRunning = true;
        timer = new System.Threading.Timer(UpdateTimer, null, 0, 1000);
        buttonText = "Punch Out";
        currentType = 1;
        PunchIn();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timeSpan = TimeSpan.Zero;
        elapsedTime = "00:00:00";

        isOnBreak = false;
        breakButtonText = "Break";

        if (currentType == 1 || currentType == 2) 
        {
            PunchOut();
        }
        else
        {
            ChangeStatus();
        }
    }

    private void ChangeStatus()
    {
        if (currentType == 0)
        {
            buttonText = "Punch In";
            breakButtonText = "Break";
        }
        else if (currentType == 1)
        {
            buttonText = "Punch Out";
            breakButtonText = "Break";
        }
        else if (currentType == 2)
        {
            buttonText = "Punch Out";
            breakButtonText = "Resume";
        }
    }

    private void UpdateTimer(object state)
    {
        if (isTimerRunning)
        {
            timeSpan = timeSpan.Add(TimeSpan.FromSeconds(1));
            elapsedTime = timeSpan.ToString(@"hh\:mm\:ss");
            InvokeAsync(StateHasChanged);
        }
    }

    private void TakeBreak()
    {
        if (isOnBreak)
        {
            isOnBreak = false;
            breakButtonText = "Break";
            currentType = 1;
        }
        else
        {
            isOnBreak = true;
            breakButtonText = "Resume";
            currentType = 2;
        }

        ChangeStatus();
        InvokeAsync(StateHasChanged);
    }

    private async void PunchIn()
    {
        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
        {
            new UserAttendanceModel
            {
                Id = 0,
                UserId = MauiProgram.Loginlist.Id,
                OrganizationId = MauiProgram.Loginlist.OrganizationId,
                AttendanceDate = istTime.Date,
                Start_Time = istTime,
                End_Time = null,
                Late_Time = null,
                Total_Time = null,
                Status = currentType
            }
        };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // Handle success if needed
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private async void PunchOut()
    {
        if (currentType == 2)
        {
            isOnBreak = false;
            currentType = 1;
        }

        DateTime istTime = GetISTTime();
        var attendanceModels = new List<UserAttendanceModel>
    {
        new UserAttendanceModel
        {
            Id = 0,
            UserId = MauiProgram.Loginlist.Id,
            OrganizationId = MauiProgram.Loginlist.OrganizationId,
            AttendanceDate = istTime.Date,
            Start_Time = null,
            End_Time = istTime,
            Late_Time = null,
            Total_Time = null,
            Status = currentType
        }
    };

        var json = JsonConvert.SerializeObject(attendanceModels);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync($"{MauiProgram.OnlineURL}api/Users/InsertAttendance", content);
        var responseString = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            currentType = 0;
            buttonText = "Punch In";
            breakButtonText = "Break";
            isOnBreak = false;
            timer?.Dispose();
        }
        else
        {
            Console.WriteLine($"Error: {responseString}");
        }
    }

    private DateTime GetISTTime()
    {
        TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime utcTime = DateTime.UtcNow;
        DateTime istTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, istTimeZone);
        return istTime;
    }
}
