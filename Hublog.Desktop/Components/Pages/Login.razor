@page "/"
@using Hublog.Desktop.Entities
@using System.Text.Json
@using Hublog.Desktop.Components
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
<link href="/css/home.css" rel="stylesheet" />

<div>
    @if (isLoggedIn)
    {
        <button @onclick="Logout">Logout</button>
        <p>Welcome, @loginModel.UserName</p>
    }
    else
    {
        <div class="login-container">
            <div class="login_formcontainer">

                <div class="home_logindiv">
                    <img src="/images/logo-re-3.png" class="home_logo" />
                </div>
                <p class="signin_text">Sign in to your account</p>

                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="username" class="loginform_labels">Email</label>
                        <InputText id="username" class="form-control signin_emailtextinput" @bind-Value="loginModel.UserName" />
                        <ValidationMessage For="@(() => loginModel.UserName)" />
                    </div>

                    <div class="form-group" style="margin-top: 12px;">
                        <label for="password" class="loginform_labels">Password</label>
                        <InputText id="password" type="password" class="form-control signin_emailtextinput" @bind-Value="loginModel.Password" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="form-group">
                        <button type="submit" class="login_button">Login</button>
                    </div>
                    @* <button class="btn btn-primary" @onclick="ShowPopup">Open Popup</button> *@

                    <button Text="Open Small Window" @onclick="OpenSmallWindow">Hii</button>

                @*  @if (isPopupVisible)
                {
                <Popup OnClose="ClosePopup" />
                } *@
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private LoginModels loginModel = new LoginModels();
    private bool isLoggedIn = false;
    private bool isPopupVisible = false;

    private async Task HandleLogin()
    {
        try
        {
            var requestContent = JsonContent.Create(loginModel);

            var response = await Http.PostAsync($"{MauiProgram.OnlineURL}api/Login/UserLogin", requestContent);

            var responseString = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var loginResult = JsonSerializer.Deserialize<Loginresult>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (loginResult != null)
                {
                    MauiProgram.Loginlist = loginResult.user;
                    MauiProgram.token = loginResult.token;

                    var claims = new Dictionary<string, string>
                {
                    { "First_Name", loginResult.user.First_Name },
                    { "Last_Name", loginResult.user.Last_Name },
                    { "Email", loginResult.user.Email }
                };

                    var claimsJson = JsonSerializer.Serialize(claims);
                    Preferences.Default.Set("Claim", claimsJson);

                    isLoggedIn = true;

                    Navigation.NavigateTo("/Dashboard");
                }
            }
            else
            {
                var errorResult = JsonSerializer.Deserialize<dynamic>(responseString);
                var errorMessage = (string)errorResult?.message ?? "Login failed. Please try again.";
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred: {ex.Message}");
        }
    }


    private async Task Logout()
    {
        var logoutModel = new LoginModels
            {
                UserName = loginModel.UserName,
                Password = loginModel.Password
            };

        try
        {
            var requestContent = JsonContent.Create(logoutModel);

            var response = await Http.PostAsync($"{MauiProgram.OnlineURL}api/Login/UserLogout", requestContent);

            var responseString = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                LogoutProcess();
            }
            else
            {
                var errorResult = JsonSerializer.Deserialize<dynamic>(responseString);
                var errorMessage = (string)errorResult?.message ?? "Logout failed. Please try again.";
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred: {ex.Message}");
        }
    }

    private void LogoutProcess()
    {
        MauiProgram.Loginlist = new Users();
        MauiProgram.token = "";

        Navigation.NavigateTo("/");

        try
        {
            Preferences.Default.Set("UserLoginData", string.Empty);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing local storage: {ex.Message}");
        }
    }

    private void ShowPopup()
    {
        isPopupVisible = true;
    }

    private void ClosePopup()
    {
        isPopupVisible = false;
    }

            private void OpenSmallWindow()
        {
            var smallWindow = new Window(new NewPage1())
            {
                Title = "Small Window"
            };

            smallWindow.Width = 400;
            smallWindow.Height = 300;

            Application.Current.OpenWindow(smallWindow);
        }

        private void OpenSmallWindow(object sender, EventArgs e)
        {
            OpenSmallWindow();
        }
}
