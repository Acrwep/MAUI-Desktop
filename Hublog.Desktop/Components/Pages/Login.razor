@page "/"
@using Hublog.Desktop.Entities
@using System.Text.Json
@using Hublog.Desktop.Components
@using System.IO
@using System;
@using System.Diagnostics;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using System.Net.Http;
@* #if WINDOWS
using Microsoft.UI.Xaml;
#endif *@

@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<link href="/css/home.css" rel="stylesheet" />

<div class="homepage_mainContainer">
    <div class="loginpage_titlebar">
        <div class="loginpage_titlebarlogoContainer">
            <img src="/images/hublog.ico" class="loginpage_titlebarlogo" />
        </div>
        <div class="loginpage_titlebarcloseContainer" @onclick="CloseApplication">
            <img src="/images/close-window.png" class="loginpage_titlebarcloseicon" />
        </div>
    </div>
    @if (isLoggedIn)
    {
        <button @onclick="Logout">Logout</button>
        <p>Welcome, @loginModel.UserName</p>
    }
    else
    {
        <div class="login-container">
            <div class="login_formcontainer">

                <div class="home_logindiv">
                    <img src="/images/logo-re-3.png" class="home_logo" />
                </div>
                <p class="signin_text">Sign in to your account</p>

                <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="username" class="loginform_labels">Email</label>
                        <InputText id="username" class="form-control signin_emailtextinput" @bind-Value="loginModel.UserName" />
                        <ValidationMessage For="@(() => loginModel.UserName)" />
                    </div>

                    <div class="form-group" style="margin-top: 12px; position:relative; margin-bottom:22px;">
                        <label for="password" class="loginform_labels">Password</label>
                        <div style="position: relative;">
                            <InputText id="password" type="@passwordInputType" autocomplete="off" class="form-control signin_passwordtextinput" @bind-Value="loginModel.Password" />
                            <button type="button" @onclick="TogglePasswordVisibility" class="login_passwordvisibilitybutton">
                                @if (isPasswordVisible)
                                {
                                    <img src="/images/visible.png" style="width:20px;opacity:0.7;" />
                                }
                                else
                                {
                                    <img src="/images/eyeoff.png" style="width:20px;opacity:0.7;" />
                                }
                            </button>
                        </div>
                        <ValidationMessage For="@(() => loginModel.Password)" />

                        @if (string.IsNullOrEmpty(userNameError))
                        {
                            <div class="loginerroemessage">
                                <p>@userNameError</p>
                            </div>
                        }
                        else if (@userNameError == "Something went wrong. Please try again later")
                        {
                            <div class="login_activewrongerroemessage">
                                <p style="color:red;margin-top:3px;">@userNameError</p>
                            </div>
                        }
                        else
                        {
                            <div class="login_activeerroemessage">
                                <p style="color:red;margin-top:3px;">@userNameError</p>
                            </div>
                        }

                        <div class="login_forgotpasswordContainer">
                            <a href="https://workstatus.qubinex.com/setpassword" class="login_forgotpassword">Forgot Password?</a>
                        </div>
                    </div>

                 

                    @if (loginLoading==true)
                    {
                        <div class="form-group">
                            <button type="submit" class="loadinglogin_button">Loading...</button>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <button type="submit" class="login_button">Login</button>
                        </div>
                    }
                  
                </EditForm>
            </div>
        </div>
    }

    <!-- Modal UpdateInprogress -->
    <div class="modal" id="updateInprogressModal" tabindex="-1" aria-labelledby="punchoutConfirmationModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content punchout_confirmationmodal_content">
                <div class="modal-header punchout_modalheader">
                    <div class="punchoutmodal_logoContainer">
                        <img src="/images/hublog.ico" class="punchoutmodal_headericon" />
                        <p>Update In Progress</p>
                    </div>
                </div>
                <div class="modal-body punchout_modalbody">
                    <div class="progressContainer">
                        @if (@progressValue == 101)
                        {
                            <div class="failedprogressBar" style="width: 90%;">
                            </div>
                        }
                        else
                        {
                            <div class="progressBar" style="width: @($"{progressValue}%");">
                            </div>
                        }

                    </div>
                    @if (@progressValue == 101)
                    {
                        <p class="updateprogressmodal_incompletetext">
                            Installation was failed
                        </p>
                    }
                    else
                    {
                        <p class="updateprogressmodal_completetext">
                            @($"{progressValue}% Complete")
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>


    <!-- Modal Network -->
    <div class="modal" id="loginNetworkModal" tabindex="-1" aria-labelledby="punchoutConfirmationModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content loginNetworkmodalmodal_content">
                <div class="modal-header punchout_modalheader">
                    <div class="loginNetworkmodalmodal_logoContainer">
                        <img src="/images/hublog.ico" class="loginNetworkmodalmodal_headericon" />
                        <p>Network Error!</p>
                    </div>
                </div>
                <div class="modal-body loginNetworkmodalmodal_modalbody">
                    <img src="/images/offline.png" class="offline_image" />
                    <p class="oops_text">Oops!</p>
                    <p class="nonetwork_text">No internet connection found. Check your connection or try again.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int progressValue = 0;

    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }
    private void CloseApplication()
    {
        // Exit the application
        Microsoft.Maui.Controls.Application.Current.Quit();
    }

    private async void HandleUpdateInprogress()
    {
        progressValue = 5;
        StateHasChanged();

        string downloadUrl = "";
        try
        {
            string URL = $"{MauiProgram.OnlineURL}api/SystemInfo/GetHublogVersion";

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", MauiProgram.token);
            var response = await Http.GetAsync(URL);
            Console.WriteLine("Response Data: " + response);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadAsStringAsync();
                var hublogVersionResponse = JsonConvert.DeserializeObject<List<HublogVersionDetails>>(responseData);

                if (hublogVersionResponse != null && hublogVersionResponse.Count > 0)
                {
                    downloadUrl = hublogVersionResponse[0].DownloadUrl;
                }
                else
                {
                    Console.WriteLine("No version details found.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching hublogversion: {ex.Message}");
        }
        finally
        {
            progressValue = 10;
            StateHasChanged();
        }

        await JSRuntime.InvokeVoidAsync("openUpdateInprogressModal");

        progressValue = 20;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("closeLogoutModal");
        await JSRuntime.InvokeVoidAsync("removeItem", "loginToken");
        await JSRuntime.InvokeVoidAsync("removeItem", "punchInTime");
        await JSRuntime.InvokeVoidAsync("setItem", "elapsedTime", "00:00:00");
        await JSRuntime.InvokeVoidAsync("removeItem", "breakStatus");
        await JSRuntime.InvokeVoidAsync("pauseAudio");

        progressValue = 30;
        StateHasChanged();
        await Task.Delay(500);

        await JSRuntime.InvokeVoidAsync("setItem", "resumeWorkAudioStatus", "false");
        await JSRuntime.InvokeVoidAsync("removeItem", "updateProcessStatus");

        MauiProgram.Loginlist = new Users();
        MauiProgram.token = "";

        progressValue = 40;
        StateHasChanged();
        await Task.Delay(500);

        string tempExePath = Path.Combine(Path.GetTempPath(), "Workstatus.exe");
        string tempBatPath = Path.Combine(Path.GetTempPath(), "install_update.bat");

        progressValue = 50;
        StateHasChanged();
        await Task.Delay(500);

        try
        {
            Console.WriteLine($"Temp EXE Path: {tempExePath}");

            // Download new version
            using (var client = new HttpClient())
            using (var response = await client.GetAsync(downloadUrl))
            {
                progressValue = 65;
                StateHasChanged();

                response.EnsureSuccessStatusCode();
                await Task.Delay(500);

                using (var fileStream = new FileStream(tempExePath, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    await response.Content.CopyToAsync(fileStream);
                }

                progressValue = 75;
                StateHasChanged();
            }

            await Task.Delay(500);
            progressValue = 90;
            StateHasChanged();

            // ✅ Create batch file to install silently with delay
            string batContent = $@"
            @echo off
            timeout /t 3 > nul
            start """" /wait ""{tempExePath}"" /S
            exit";

            File.WriteAllText(tempBatPath, batContent);

            await Task.Delay(500);
            progressValue = 100;
            StateHasChanged();

            // ✅ Run the batch file with admin privileges
           #if WINDOWS
           Process.Start(new ProcessStartInfo
           {
           FileName = tempBatPath,
           UseShellExecute = true,
           Verb = "runas"
           });

          // Quit the app to release file locks
          CloseAppWhileUpdate();
          #else
            Console.WriteLine("Installer update is not supported on this platform.");
          #endif
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            progressValue = 101;
            StateHasChanged();
            await Task.Delay(2000);
            CloseAppWhileUpdate();
        }
    }
}