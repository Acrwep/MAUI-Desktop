@using Hublog.Desktop.Entities
@using System.Text.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
<link href="/css/dashboard.css" rel="stylesheet" />

@* <button @onclick="Logout" class="logout_button">
    <img src="/images/log-out.svg" class="logout_image" />
</button> *@
<button type="button" class="punchoutConfirmationModal_buttons" style="margin-right:12px" @onclick="Logout">Yes</button>

@code {
    private async Task Logout()
    {
        Navigation.NavigateTo("/");
        await JSRuntime.InvokeVoidAsync("closeLogoutModal");
        await JSRuntime.InvokeVoidAsync("removeItem", "loginToken");
        await JSRuntime.InvokeVoidAsync("removeItem", "punchInTime");
        await JSRuntime.InvokeVoidAsync("setItem", "elapsedTime", "00:00:00");
        await JSRuntime.InvokeVoidAsync("removeItem", "breakStatus");
        await JSRuntime.InvokeVoidAsync("pauseAudio");
        await JSRuntime.InvokeVoidAsync("setItem", "resumeWorkAudioStatus", "false");
        try
        {
            var currentUser = MauiProgram.Loginlist;

            if (currentUser == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "No user is currently logged in.");
                return;
            }

            var loginModel = new LoginModels
                {
                    UserName = currentUser.Email,
                    Password = currentUser.Password
                };

            var loginJson = JsonSerializer.Serialize(loginModel);

            var content = new StringContent(loginJson, System.Text.Encoding.UTF8, "application/json");

            var response = await Http.PostAsync($"{MauiProgram.OnlineURL}api/Login/UserLogout", content);

            var responseString = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                await LogoutProcessAsync();
            }
            else
            {
                var errorMessage = "Logout failed. Please try again.";
                try
                {
                    using (var document = JsonDocument.Parse(responseString))
                    {
                        var root = document.RootElement;
                        if (root.TryGetProperty("message", out var messageProperty))
                        {
                            errorMessage = messageProperty.GetString() ?? errorMessage;
                        }
                    }
                }
                catch
                {
                    // Use the default error message if JSON parsing fails
                }

                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An unexpected error occurred: {ex.Message}");
        }
    }

    private async Task LogoutProcessAsync()
    {
        MauiProgram.Loginlist = new Users();
        MauiProgram.token = "";

        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "systemdata");
        var data = JsonSerializer.Serialize(MauiProgram.Loginlist);
    }
}
